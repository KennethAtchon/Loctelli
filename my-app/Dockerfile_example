# Stage 1: Build
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm and dependencies for native modules
RUN apk add --no-cache python3 build-base g++ make \
    && npm install -g pnpm

# Copy package files and install dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install

# Copy source code
COPY . .

# Define arguments for environment variables needed at build time
ARG ADMIN_SPECIAL_CODE_HASH
ARG NEXT_PUBLIC_ENV
ARG NEXTAUTH_SECRET
ARG NEXTAUTH_URL
ARG NEXT_PUBLIC_SUPABASE_URL
ARG NEXT_PUBLIC_SUPABASE_ANON_KEY
ARG SUPABASE_SERVICE_ROLE_KEY
ARG ENCRYPTION_KEY
ARG REDIS_URL
ARG R2_ACCOUNT_ID
ARG R2_ACCESS_KEY_ID
ARG R2_SECRET_ACCESS_KEY
ARG R2_BUCKET_NAME
ARG R2_PUBLIC_URL
ARG R2_ENABLED

# Set environment variables for the build
ENV ADMIN_SPECIAL_CODE_HASH=$ADMIN_SPECIAL_CODE_HASH
ENV NEXT_PUBLIC_ENV=$NEXT_PUBLIC_ENV
ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET
ENV NEXTAUTH_URL=$NEXTAUTH_URL
ENV NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
ENV SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
ENV ENCRYPTION_KEY=$ENCRYPTION_KEY
ENV REDIS_URL=$REDIS_URL
ENV R2_ACCOUNT_ID=$R2_ACCOUNT_ID
ENV R2_ACCESS_KEY_ID=$R2_ACCESS_KEY_ID
ENV R2_SECRET_ACCESS_KEY=$R2_SECRET_ACCESS_KEY
ENV R2_BUCKET_NAME=$R2_BUCKET_NAME
ENV R2_PUBLIC_URL=$R2_PUBLIC_URL
ENV R2_ENABLED=$R2_ENABLED

# Generate Prisma Client
RUN pnpm exec prisma generate

# Build the Next.js app
RUN pnpm run build

# Stage 2: Production
FROM node:20-alpine

WORKDIR /app

# Install pnpm and runtime dependencies
RUN apk add --no-cache libc6-compat \
    && npm install -g pnpm

# Copy necessary files from builder
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/lib/generated/prisma ./lib/generated/prisma
COPY --from=builder /app/prisma ./prisma

# Install production dependencies
RUN pnpm install --prod

# Expose port
EXPOSE 8080

# Start the app with migrations
CMD ["sh", "-c", "pnpm exec prisma migrate deploy && pnpm start"]