// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models migrated from SQLAlchemy models

model AdminUser {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("admin") // admin, super_admin
  isActive        Boolean     @default(true)
  permissions     Json?       // JSON field for granular permissions
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdUsers    User[]      // Users created by this admin
  promptTemplates PromptTemplate[] // Prompt templates created by this admin
  subAccounts     SubAccount[] // SubAccounts created by this admin
  integrationTemplates IntegrationTemplate[] // Integration templates created by this admin
  integrations    Integration[] // Integrations created by this admin
}

model SubAccount {
  id              Int         @id @default(autoincrement())
  name            String      // SubAccount name (e.g., "Acme Corp", "TechStart Inc")
  description     String?     @db.Text // Optional description
  isActive        Boolean     @default(true)
  settings        Json?       // SubAccount-specific settings
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  createdByAdminId Int
  createdByAdmin  AdminUser   @relation(fields: [createdByAdminId], references: [id])
  users           User[]      // Users belonging to this SubAccount
  strategies      Strategy[]  // Strategies created within this SubAccount
  leads           Lead[]      // Leads created within this SubAccount
  bookings        Booking[]   // Bookings created within this SubAccount
  integrations    Integration[] // Integrations configured for this SubAccount
  smsMessages     SmsMessage[] // SMS messages sent within this SubAccount
  smsCampaigns    SmsCampaign[] // SMS campaigns created within this SubAccount
  businessSearches BusinessSearch[] // Business searches performed within this SubAccount
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("user") // admin, user, manager
  isActive        Boolean     @default(true)
  company         String?
  budget          String?
  bookingsTime    Json?       // JSON field for bookings time
  bookingEnabled  Int         @default(1) // 0 = False, 1 = True
  calendarId      String?     // Calendar ID for GoHighLevel integration
  locationId      String?     // Location ID for GoHighLevel integration
  assignedUserId  String?     // Assigned User ID for GoHighLevel integration
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  subAccountId    Int         // Required: User must belong to a SubAccount
  subAccount      SubAccount  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  createdByAdminId Int?       // Admin who created this user
  createdByAdmin  AdminUser?  @relation(fields: [createdByAdminId], references: [id])
  strategies      Strategy[]
  leads           Lead[]      // Leads created by this user
  bookings        Booking[]
  smsMessages     SmsMessage[] // SMS messages sent by this user
  smsCampaigns    SmsCampaign[] // SMS campaigns created by this user
  apiKeys         ApiKey[] // User's custom API keys
  businessSearches BusinessSearch[] // Business searches performed by this user
  rateLimits      RateLimit[] // Rate limit tracking for this user
}

model Strategy {
  id                      Int        @id @default(autoincrement())
  regularUserId           Int
  subAccountId            Int        // Required: Strategy belongs to a SubAccount
  subAccount              SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  name                    String
  tag                     String?
  tone                    String?
  aiInstructions          String?    @db.Text
  objectionHandling       String?    @db.Text
  qualificationPriority   String?
  creativity              Int?
  aiObjective             String?    @db.Text
  disqualificationCriteria String?   @db.Text
  exampleConversation     Json?
  delayMin                Int?       // Minimum delay in seconds
  delayMax                Int?       // Maximum delay in seconds
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @default(now()) @updatedAt
  regularUser             User       @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  leads                   Lead[]
  promptTemplateId        Int
  promptTemplate          PromptTemplate @relation(fields: [promptTemplateId], references: [id])
}

model Lead {
  id             Int       @id @default(autoincrement())
  regularUserId  Int
  strategyId     Int
  subAccountId   Int       // Required: Lead belongs to a SubAccount
  subAccount     SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phone          String?
  company        String?
  position       String?
  customId       String?
  messageHistory Json?     // List of messages in JSON format
  status         String    @default("lead")
  notes          String?   @db.Text
  lastMessage    String?   @db.Text
  lastMessageDate String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  regularUser    User      @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  strategy       Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  bookings       Booking[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  leadId       Int?
  subAccountId Int      // Required: Booking belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  bookingType  String
  details      Json
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  lead         Lead?    @relation(fields: [leadId], references: [id])
}

model PromptTemplate {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?   @db.Text
  isActive            Boolean   @default(false) // Only one can be active globally
  systemPrompt        String    @db.Text // The main system prompt
  role                String    @default("conversational AI and sales representative")
  instructions        String?   @db.Text // Additional instructions
  context             String?   @db.Text // Context information
  bookingInstruction  String?   @db.Text // Booking-specific instructions
  creativity          Int       @default(7) // 1-10 scale
  temperature         Float     @default(0.7) // OpenAI temperature
  maxTokens           Int?      // Optional token limit
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdByAdminId    Int
  createdByAdmin      AdminUser @relation(fields: [createdByAdminId], references: [id])
  strategies          Strategy[]
}

model IntegrationTemplate {
  id                  Int       @id @default(autoincrement())
  name                String    // e.g., "GoHighLevel", "Facebook Ads", "Google Analytics"
  displayName         String    // e.g., "GoHighLevel CRM", "Facebook Advertising"
  description         String?   @db.Text
  category            String    // e.g., "CRM", "Advertising", "Analytics", "Social Media"
  icon                String?   // Icon identifier or URL
  isActive            Boolean   @default(true)
  configSchema        Json      // JSON schema defining required/optional fields
  setupInstructions   String?   @db.Text // Markdown instructions for setup
  webhookUrl          String?   // Default webhook URL if applicable
  apiVersion          String?   // API version supported
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdByAdminId    Int
  createdByAdmin      AdminUser @relation(fields: [createdByAdminId], references: [id])
  integrations        Integration[] // Subaccount integrations using this template
}

model Integration {
  id                    Int       @id @default(autoincrement())
  subAccountId          Int       // Required: Integration belongs to a SubAccount
  subAccount            SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  integrationTemplateId Int
  integrationTemplate   IntegrationTemplate @relation(fields: [integrationTemplateId], references: [id])
  name                  String    // Custom name for this integration instance
  description           String?   @db.Text
  isActive              Boolean   @default(false)
  config                Json      // Integration-specific configuration
  status                String    @default("pending") // pending, active, error, disconnected
  lastSyncAt            DateTime?
  errorMessage          String?   @db.Text
  webhookSecret         String?   // For webhook verification
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdByAdminId      Int
  createdByAdmin        AdminUser @relation(fields: [createdByAdminId], references: [id])
}

model SmsMessage {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  subAccountId Int      // Required: SMS belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Message details
  phoneNumber  String   // Recipient phone number
  message      String   @db.Text // SMS content
  status       String   @default("pending") // pending, sent, delivered, failed
  
  // Twilio details
  twilioSid    String?  // Twilio message SID
  errorMessage String?  @db.Text // Error details if failed
  
  // Campaign tracking
  campaignId   Int?     // Optional: Link to SMS campaign
  campaign     SmsCampaign? @relation(fields: [campaignId], references: [id])
  
  // Timestamps
  sentAt       DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SmsCampaign {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  subAccountId Int      // Required: Campaign belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Campaign details
  name         String   // Campaign name
  message      String   @db.Text // SMS template
  status       String   @default("draft") // draft, sending, completed, failed
  
  // Statistics
  totalRecipients Int   @default(0)
  sentCount      Int   @default(0)
  deliveredCount Int   @default(0)
  failedCount    Int   @default(0)
  
  // Timestamps
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  messages     SmsMessage[]
}

// Business Finder Models

model ApiKey {
  id          Int      @id @default(autoincrement())
  regularUserId Int?   // Optional: Can be global (service keys) or user-specific
  regularUser User?    @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  service     String   // "google_places", "yelp", "openstreetmap"
  keyName     String   // Display name for the key
  keyValue    String   // Encrypted API key
  isActive    Boolean  @default(true)
  dailyLimit  Int?     // Daily request limit for this key
  usageCount  Int      @default(0) // Current day usage
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([regularUserId, service, keyName])
}

model BusinessSearch {
  id            String   @id @default(uuid())
  regularUserId Int
  subAccountId  Int      // Required: Search belongs to a SubAccount
  subAccount    SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser   User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Search parameters
  query         String   // Business name or category
  location      String?  // Address, city, coordinates
  radius        Float?   // Search radius in kilometers
  category      String?  // Business category filter
  
  // Search metadata
  searchHash    String   @unique // Hash of search parameters for caching
  totalResults  Int      @default(0)
  results       Json     // Array of business results from all APIs
  sources       Json     // Array of APIs used: ["google_places", "yelp", "osm"]
  
  // Performance tracking
  responseTime  Int?     // Total search time in milliseconds
  apiCalls      Json     // Object tracking calls per API: {google: 1, yelp: 1}
  
  // Status
  status        String   @default("completed") // pending, completed, failed, expired
  errorMessage  String?  @db.Text
  
  // Cache management
  expiresAt     DateTime // Cache expiry (24 hours from creation)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RateLimit {
  id          Int      @id @default(autoincrement())
  regularUserId Int?   // Optional: Can track global or per-user limits
  regularUser User?    @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  ipAddress   String?  // Track by IP for abuse prevention
  service     String   // "business_finder", "google_places", "yelp", etc.
  
  // Usage tracking
  requestCount Int     @default(0)
  dailyLimit   Int     @default(500) // Default daily limit
  windowStart  DateTime // Start of current rate limit window
  
  // Violation tracking
  violations   Int     @default(0) // Number of times limit exceeded
  blockedUntil DateTime? // Temporary ban expiry
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([regularUserId, service])
  @@unique([ipAddress, service])
}





