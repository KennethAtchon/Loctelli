// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models migrated from SQLAlchemy models

model AdminUser {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("admin") // admin, super_admin
  isActive        Boolean     @default(true)
  permissions     Json?       // JSON field for granular permissions
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdUsers    User[]      // Users created by this admin
  promptTemplates PromptTemplate[] // Prompt templates created by this admin
  subAccounts     SubAccount[] // SubAccounts created by this admin
  integrationTemplates IntegrationTemplate[] // Integration templates created by this admin
  integrations    Integration[] // Integrations created by this admin

  // Dynamic forms
  formTemplates   FormTemplate[] // Form templates created by this admin
}

model SubAccount {
  id              Int         @id @default(autoincrement())
  name            String      // SubAccount name (e.g., "Acme Corp", "TechStart Inc")
  description     String?     @db.Text // Optional description
  isActive        Boolean     @default(true)
  settings        Json?       // SubAccount-specific settings
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  createdByAdminId Int
  createdByAdmin  AdminUser   @relation(fields: [createdByAdminId], references: [id])
  users           User[]      // Users belonging to this SubAccount
  strategies      Strategy[]  // Strategies created within this SubAccount
  leads           Lead[]      // Leads created within this SubAccount
  bookings        Booking[]   // Bookings created within this SubAccount
  integrations    Integration[] // Integrations configured for this SubAccount
  smsMessages     SmsMessage[] // SMS messages sent within this SubAccount
  smsCampaigns    SmsCampaign[] // SMS campaigns created within this SubAccount
  businessSearches BusinessSearch[] // Business searches performed within this SubAccount

  // Contact management
  contactSubmissions ContactSubmission[]

  // Dynamic forms
  formTemplates FormTemplate[]

  // Prompt template selections
  promptTemplates SubAccountPromptTemplate[]
  formSubmissions FormSubmission[]
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("user") // admin, user, manager
  isActive        Boolean     @default(true)
  company         String?
  budget          String?
  bookingsTime    Json?       // JSON field for bookings time
  bookingEnabled  Int         @default(1) // 0 = False, 1 = True
  timezone        String      @default("America/New_York") // User's default timezone (IANA format)
  calendarId      String?     // Calendar ID for GoHighLevel integration
  locationId      String?     // Location ID for GoHighLevel integration
  assignedUserId  String?     // Assigned User ID for GoHighLevel integration
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  subAccountId    Int         // Required: User must belong to a SubAccount
  subAccount      SubAccount  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  createdByAdminId Int?       // Admin who created this user
  createdByAdmin  AdminUser?  @relation(fields: [createdByAdminId], references: [id])
  strategies      Strategy[]
  leads           Lead[]      // Leads created by this user
  bookings        Booking[]
  smsMessages     SmsMessage[] // SMS messages sent by this user
  smsCampaigns    SmsCampaign[] // SMS campaigns created by this user
  apiKeys         ApiKey[] // User's custom API keys
  businessSearches BusinessSearch[] // Business searches performed by this user
  rateLimits      RateLimit[] // Rate limit tracking for this user
  
  // Contact management
  assignedContacts ContactSubmission[]

  // Dynamic forms
  assignedFormSubmissions FormSubmission[]
}

model Strategy {
  id                      Int        @id @default(autoincrement())
  regularUserId           Int
  subAccountId            Int
  promptTemplateId        Int

  // ===== CORE IDENTITY =====
  name                    String     // "Mike - Roofing Storm Damage"
  description             String?    @db.Text
  tag                     String?    // "roofing"
  industryContext         String?    // "Roofing - Storm Damage"

  // ===== PERSONA DETAILS =====
  aiName                  String     // "Mike"
  aiRole                  String     @db.Text // "Senior Roofing Consultant with 15 years experience..."
  companyBackground       String?    @db.Text // "15 years in business, GAF Master Elite, BBB A+..."

  // ===== CONVERSATION STYLE =====
  conversationTone        String     @db.Text // "Assertive, direct, urgency-focused. Use phrases like..."
  communicationStyle      String?    @db.Text // "Take control naturally, be empathetic but honest..."

  // ===== QUALIFICATION & DISCOVERY =====
  qualificationQuestions  String     @db.Text // "1. What type of issue? 2. When noticed? 3. Budget?..."
  disqualificationRules   String?    @db.Text // "Budget under $10k: refer to specialists..."

  // ===== OBJECTION HANDLING =====
  objectionHandling       String     @db.Text // "PRICE: 'Here's the reality...' TIMING: '...'"

  // ===== CLOSING & BOOKING =====
  closingStrategy         String     @db.Text // "Use assumptive close. After budget confirmed..."
  bookingInstructions     String?    @db.Text // "Offer specific time slots, create urgency..."

  // ===== OUTPUT RULES =====
  outputGuidelines        String?    @db.Text // "Keep responses 2-4 sentences, always end with question..."
  prohibitedBehaviors     String?    @db.Text // "Don't be pushy, don't badmouth competitors..."

  // ===== OPTIONAL STRUCTURED DATA =====
  metadata                Json?      // Any additional data for analytics/filtering

  // ===== BEHAVIORAL SETTINGS =====
  delayMin                Int?
  delayMax                Int?

  // ===== METADATA =====
  isActive                Boolean    @default(true)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // ===== RELATIONS =====
  regularUser             User       @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  subAccount              SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  promptTemplate          PromptTemplate @relation(fields: [promptTemplateId], references: [id])
  leads                   Lead[]

  @@index([subAccountId])
  @@index([regularUserId])
  @@index([promptTemplateId])
}

model Lead {
  id             Int       @id @default(autoincrement())
  regularUserId  Int
  strategyId     Int
  subAccountId   Int       // Required: Lead belongs to a SubAccount
  subAccount     SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phone          String?
  company        String?
  position       String?
  customId       String?
  timezone       String?   // Lead's timezone preference (IANA format)
  messageHistory Json?     // List of messages in JSON format
  status         String    @default("lead")
  notes          String?   @db.Text
  lastMessage    String?   @db.Text
  lastMessageDate String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  regularUser    User      @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  strategy       Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  bookings       Booking[]
  conversationMessages ConversationMessage[] // Encrypted conversation messages
}

model Booking {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  leadId       Int?
  subAccountId Int      // Required: Booking belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  bookingType  String
  details      Json
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  lead         Lead?    @relation(fields: [leadId], references: [id])
}

model PromptTemplate {
  id                  Int       @id @default(autoincrement())
  name                String    // "Sales Agent", "Support Bot", "Scheduler"
  description         String?   @db.Text
  category            String?   // "sales", "support", "scheduling"

  // ===== THE MINIMAL BASE =====
  baseSystemPrompt    String    @db.Text // ONE simple sentence

  // ===== OPENAI DEFAULTS =====
  temperature         Float?    @default(0.7)
  maxTokens           Int?

  // ===== METADATA =====
  isActive            Boolean   @default(false)
  tags                String[]  @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdByAdminId    Int
  createdByAdmin      AdminUser @relation(fields: [createdByAdminId], references: [id])

  // ===== RELATIONS =====
  strategies          Strategy[]
  subAccountTemplates SubAccountPromptTemplate[]

  @@index([category])
  @@index([createdByAdminId])
}

model SubAccountPromptTemplate {
  id               Int            @id @default(autoincrement())
  subAccountId     Int
  promptTemplateId Int
  isActive         Boolean        @default(false) // Only one can be active per subaccount
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  subAccount       SubAccount     @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  promptTemplate   PromptTemplate @relation(fields: [promptTemplateId], references: [id], onDelete: Cascade)

  @@unique([subAccountId, promptTemplateId])
  @@index([subAccountId, isActive])
}

model IntegrationTemplate {
  id                  Int       @id @default(autoincrement())
  name                String    // e.g., "GoHighLevel", "Facebook Ads", "Google Analytics"
  displayName         String    // e.g., "GoHighLevel CRM", "Facebook Advertising"
  description         String?   @db.Text
  category            String    // e.g., "CRM", "Advertising", "Analytics", "Social Media"
  icon                String?   // Icon identifier or URL
  isActive            Boolean   @default(true)
  configSchema        Json      // JSON schema defining required/optional fields
  setupInstructions   String?   @db.Text // Markdown instructions for setup
  webhookUrl          String?   // Default webhook URL if applicable
  apiVersion          String?   // API version supported
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdByAdminId    Int
  createdByAdmin      AdminUser @relation(fields: [createdByAdminId], references: [id])
  integrations        Integration[] // Subaccount integrations using this template
}

model Integration {
  id                    Int       @id @default(autoincrement())
  subAccountId          Int       // Required: Integration belongs to a SubAccount
  subAccount            SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  integrationTemplateId Int
  integrationTemplate   IntegrationTemplate @relation(fields: [integrationTemplateId], references: [id])
  name                  String    // Custom name for this integration instance
  description           String?   @db.Text
  isActive              Boolean   @default(false)
  config                Json      // Integration-specific configuration
  status                String    @default("pending") // pending, active, error, disconnected
  lastSyncAt            DateTime?
  errorMessage          String?   @db.Text
  webhookSecret         String?   // For webhook verification
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdByAdminId      Int
  createdByAdmin        AdminUser @relation(fields: [createdByAdminId], references: [id])
}

model SmsMessage {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  subAccountId Int      // Required: SMS belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Message details
  phoneNumber  String   // Recipient phone number
  message      String   @db.Text // SMS content
  status       String   @default("pending") // pending, sent, delivered, failed
  
  // Twilio details
  twilioSid    String?  // Twilio message SID
  errorMessage String?  @db.Text // Error details if failed
  
  // Campaign tracking
  campaignId   Int?     // Optional: Link to SMS campaign
  campaign     SmsCampaign? @relation(fields: [campaignId], references: [id])
  
  // Timestamps
  sentAt       DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SmsCampaign {
  id           Int      @id @default(autoincrement())
  regularUserId Int
  subAccountId Int      // Required: Campaign belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser  User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Campaign details
  name         String   // Campaign name
  message      String   @db.Text // SMS template
  status       String   @default("draft") // draft, sending, completed, failed
  
  // Statistics
  totalRecipients Int   @default(0)
  sentCount      Int   @default(0)
  deliveredCount Int   @default(0)
  failedCount    Int   @default(0)
  
  // Timestamps
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  messages     SmsMessage[]
}

// Business Finder Models

model ApiKey {
  id          Int      @id @default(autoincrement())
  regularUserId Int?   // Optional: Can be global (service keys) or user-specific
  regularUser User?    @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  service     String   // "google_places", "yelp", "openstreetmap"
  keyName     String   // Display name for the key
  keyValue    String   // Encrypted API key
  isActive    Boolean  @default(true)
  dailyLimit  Int?     // Daily request limit for this key
  usageCount  Int      @default(0) // Current day usage
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([regularUserId, service, keyName])
}

model BusinessSearch {
  id            String   @id @default(uuid())
  regularUserId Int
  subAccountId  Int      // Required: Search belongs to a SubAccount
  subAccount    SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  regularUser   User     @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  
  // Search parameters
  query         String   // Business name or category
  location      String?  // Address, city, coordinates
  radius        Float?   // Search radius in kilometers
  category      String?  // Business category filter
  
  // Search metadata
  searchHash    String   @unique // Hash of search parameters for caching
  totalResults  Int      @default(0)
  results       Json     // Array of business results from all APIs
  sources       Json     // Array of APIs used: ["google_places", "yelp", "osm"]
  
  // Performance tracking
  responseTime  Int?     // Total search time in milliseconds
  apiCalls      Json     // Object tracking calls per API: {google: 1, yelp: 1}
  
  // Status
  status        String   @default("completed") // pending, completed, failed, expired
  errorMessage  String?  @db.Text
  
  // Cache management
  expiresAt     DateTime // Cache expiry (24 hours from creation)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RateLimit {
  id          Int      @id @default(autoincrement())
  regularUserId Int?   // Optional: Can track global or per-user limits
  regularUser User?    @relation(fields: [regularUserId], references: [id], onDelete: Cascade)
  ipAddress   String?  // Track by IP for abuse prevention
  service     String   // "business_finder", "google_places", "yelp", etc.
  
  // Usage tracking
  requestCount Int     @default(0)
  dailyLimit   Int     @default(500) // Default daily limit
  windowStart  DateTime // Start of current rate limit window
  
  // Violation tracking
  violations   Int     @default(0) // Number of times limit exceeded
  blockedUntil DateTime? // Temporary ban expiry
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([regularUserId, service])
  @@unique([ipAddress, service])
}

// Contact System Models

model ContactSubmission {
  id          String   @id @default(cuid())
  fullName    String
  email       String
  phone       String
  services    String   // JSON string or enum for multiple services
  message     String?  // Optional message field
  source      String   @default("website") // website, landing_page, etc.
  status      ContactStatus @default(NEW)
  priority    Priority @default(MEDIUM)
  
  // Tracking fields
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  followedUpAt DateTime?
  closedAt    DateTime?
  
  // Assignment
  assignedToId Int?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  
  // Notes and follow-up - JSON array of note objects
  notes       Json?    // [{ content: string, createdAt: string, authorId: number, authorName: string }]
  
  // Multi-tenant support
  subAccountId Int
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id])
  
  @@map("contact_submissions")
}

enum ContactStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  CLOSED_WON
  CLOSED_LOST
  UNRESPONSIVE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Dynamic Forms System Models

model FormTemplate {
  id           String   @id @default(cuid())
  name         String   // e.g., "GHL Onboarding Form", "Facebook Ads Setup"
  slug         String   @unique // URL-friendly identifier, e.g., "ghl-onboarding"
  description  String?  @db.Text
  isActive     Boolean  @default(true)

  // Form configuration - array of field definitions
  schema       Json     // [{ id: string, type: "text|email|phone|textarea|select|checkbox|radio|file|image", label: string, placeholder?: string, options?: string[], required?: boolean }]

  // Styling and presentation
  title        String   // Display title on the form page
  subtitle     String?  @db.Text // Optional subtitle/description
  submitButtonText String @default("Submit")
  successMessage String @default("Thank you for your submission!")

  // Wake-up mechanism for public forms
  requiresWakeUp Boolean @default(true) // Whether to wake up the database
  wakeUpInterval Int     @default(30) // Wake up every N seconds while user is on page

  // Multi-tenant support
  subAccountId Int?     // If null, available to all subaccounts
  subAccount   SubAccount? @relation(fields: [subAccountId], references: [id])

  // Audit fields
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdByAdminId Int
  createdByAdmin AdminUser @relation(fields: [createdByAdminId], references: [id])

  // Relations
  submissions  FormSubmission[]

  @@map("form_templates")
}

model FormSubmission {
  id           String   @id @default(cuid())

  // Form template reference
  formTemplateId String
  formTemplate FormTemplate @relation(fields: [formTemplateId], references: [id])

  // Submission data
  data         Json     // All form field values stored as JSON
  files        Json?    // File upload information (R2 URLs, metadata)

  // Metadata
  ipAddress    String?
  userAgent    String?  @db.Text
  source       String   @default("website") // website, landing_page, etc.

  // Status tracking
  status       String   @default("new") // new, reviewed, contacted, processed, archived
  priority     Priority @default(MEDIUM)

  // Assignment
  assignedToId Int?
  assignedTo   User?    @relation(fields: [assignedToId], references: [id])

  // Notes and follow-up - JSON array of note objects
  notes        Json?    // [{ content: string, createdAt: string, authorId: number, authorName: string }]

  // Timestamps
  submittedAt  DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reviewedAt   DateTime?
  contactedAt  DateTime?

  // Multi-tenant support
  subAccountId Int
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id])

  @@map("form_submissions")
}

// Security and Conversation Models

model ConversationMessage {
  id                String   @id @default(cuid())
  leadId            Int
  lead              Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  // Message content
  role              String   // user, assistant, system
  encryptedContent  String   @db.Text // AES-256 encrypted message content
  salt              String   // Salt used for encryption
  iv                String   // Initialization vector for encryption
  integrityHash     String   // SHA-256 hash for integrity verification

  // Validation and metadata
  validationScore   Float    @default(0.0) // Security validation score (0.0 - 1.0)
  messageTimestamp  DateTime // Original message timestamp
  metadata          String?  @db.Text // Additional metadata as JSON

  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("conversation_messages")
}

model SecurityIncident {
  id          String   @id @default(cuid())
  type        String   // PROMPT_INJECTION, INTEGRITY_VIOLATION, RATE_LIMIT, etc.
  severity    String   // LOW, MEDIUM, HIGH, CRITICAL
  description String   @db.Text

  // Related entities
  leadId      Int?
  messageId   String?
  userId      Int?

  // Incident data
  metadata    String?  @db.Text // Additional incident details as JSON
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?  // Admin/system that resolved the incident

  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("security_incidents")
}

// Update Lead model to include conversation messages
// Note: This would be done via migration to add the relation





