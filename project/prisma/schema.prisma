// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models migrated from SQLAlchemy models

model AdminUser {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("admin") // admin, super_admin
  isActive        Boolean     @default(true)
  permissions     Json?       // JSON field for granular permissions
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdUsers    User[]      // Users created by this admin
  promptTemplates PromptTemplate[] // Prompt templates created by this admin
  subAccounts     SubAccount[] // SubAccounts created by this admin
}

model SubAccount {
  id              Int         @id @default(autoincrement())
  name            String      // SubAccount name (e.g., "Acme Corp", "TechStart Inc")
  description     String?     @db.Text // Optional description
  isActive        Boolean     @default(true)
  settings        Json?       // SubAccount-specific settings
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  createdByAdminId Int
  createdByAdmin  AdminUser   @relation(fields: [createdByAdminId], references: [id])
  users           User[]      // Users belonging to this SubAccount
  strategies      Strategy[]  // Strategies created within this SubAccount
  leads           Lead[]      // Leads created within this SubAccount
  bookings        Booking[]   // Bookings created within this SubAccount
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String      // Hashed password for authentication
  role            String      @default("user") // admin, user, manager
  isActive        Boolean     @default(true)
  company         String?
  budget          String?
  bookingsTime    Json?       // JSON field for bookings time
  bookingEnabled  Int         @default(1) // 0 = False, 1 = True
  calendarId      String?     // Calendar ID for GoHighLevel integration
  locationId      String?     // Location ID for GoHighLevel integration
  assignedUserId  String?     // Assigned User ID for GoHighLevel integration
  lastLoginAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  subAccountId    Int         // Required: User must belong to a SubAccount
  subAccount      SubAccount  @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  strategies      Strategy[]
  leads           Lead[]      // Leads created by this user
  bookings        Booking[]
}

model Strategy {
  id                      Int        @id @default(autoincrement())
  userId                  Int
  subAccountId            Int        // Required: Strategy belongs to a SubAccount
  subAccount              SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  name                    String
  tag                     String?
  tone                    String?
  aiInstructions          String?    @db.Text
  objectionHandling       String?    @db.Text
  qualificationPriority   String?
  creativity              Int?
  aiObjective             String?    @db.Text
  disqualificationCriteria String?   @db.Text
  exampleConversation     Json?
  delayMin                Int?       // Minimum delay in seconds
  delayMax                Int?       // Maximum delay in seconds
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @default(now()) @updatedAt
  user                    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads                   Lead[]
  promptTemplateId        Int
  promptTemplate          PromptTemplate @relation(fields: [promptTemplateId], references: [id])
}

model Lead {
  id             Int       @id @default(autoincrement())
  userId         Int
  strategyId     Int
  subAccountId   Int       // Required: Lead belongs to a SubAccount
  subAccount     SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  name           String
  email          String?
  phone          String?
  company        String?
  position       String?
  customId       String?
  messageHistory Json?     // List of messages in JSON format
  status         String    @default("lead")
  notes          String?   @db.Text
  lastMessage    String?   @db.Text
  lastMessageDate String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy       Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  bookings       Booking[]
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       Int
  leadId       Int?
  subAccountId Int      // Required: Booking belongs to a SubAccount
  subAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  bookingType  String
  details      Json
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lead         Lead?    @relation(fields: [leadId], references: [id])
}

model PromptTemplate {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?   @db.Text
  isActive            Boolean   @default(false) // Only one can be active globally
  systemPrompt        String    @db.Text // The main system prompt
  role                String    @default("conversational AI and sales representative")
  instructions        String?   @db.Text // Additional instructions
  context             String?   @db.Text // Context information
  bookingInstruction  String?   @db.Text // Booking-specific instructions
  creativity          Int       @default(7) // 1-10 scale
  temperature         Float     @default(0.7) // OpenAI temperature
  maxTokens           Int?      // Optional token limit
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdByAdminId    Int
  createdByAdmin      AdminUser @relation(fields: [createdByAdminId], references: [id])
  strategies          Strategy[]
}
